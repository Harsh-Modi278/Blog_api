[{"/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/index.js":"1","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/App.js":"2","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/NavBar.jsx":"3","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/Home.jsx":"4","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/useFetch.js":"5","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/List.jsx":"6","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/BlogDetails.jsx":"7","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/Login.jsx":"8","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/Register.jsx":"9","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/FlashMessages.jsx":"10","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/UserContext.js":"11","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/AdminLogin.jsx":"12","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/Create.jsx":"13"},{"size":219,"mtime":1611376647810,"results":"14","hashOfConfig":"15"},{"size":2636,"mtime":1611412748573,"results":"16","hashOfConfig":"15"},{"size":1258,"mtime":1611407068663,"results":"17","hashOfConfig":"15"},{"size":571,"mtime":1611408228315,"results":"18","hashOfConfig":"15"},{"size":1907,"mtime":1611412734190,"results":"19","hashOfConfig":"15"},{"size":1559,"mtime":1611421150641,"results":"20","hashOfConfig":"15"},{"size":6707,"mtime":1611421503859,"results":"21","hashOfConfig":"15"},{"size":2557,"mtime":1611338953982,"results":"22","hashOfConfig":"15"},{"size":2408,"mtime":1611418636751,"results":"23","hashOfConfig":"15"},{"size":414,"mtime":1611242021916,"results":"24","hashOfConfig":"15"},{"size":182,"mtime":1611339684934,"results":"25","hashOfConfig":"15"},{"size":2171,"mtime":1611407369258,"results":"26","hashOfConfig":"15"},{"size":1567,"mtime":1611421533474,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"19yoaye",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/index.js",[],["60","61"],"/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/App.js",["62"],"import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar.jsx\";\nimport Home from \"./components/Home.jsx\";\nimport BlogDetails from \"./components/BlogDetails.jsx\";\nimport Login from \"./components/Login.jsx\";\nimport Register from \"./components/Register.jsx\";\nimport AdminLogin from \"./components/AdminLogin.jsx\";\nimport Create from \"./components/Create.jsx\";\nimport { UserContext } from \"./UserContext.js\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const email = JSON.parse(localStorage.getItem(\"token\"))\n    ? JSON.parse(localStorage.getItem(\"token\")).email\n    : null;\n\n  const [user, setUser] = useState({ email: email || \"\", isAdmin: false });\n\n  // equivalent to componentDidMount\n  useEffect(() => {\n    if (user.email) {\n      // if token is available in localStorage, try to check if admin access is available for this user\n\n      const myInit = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `BEARER ${\n            JSON.parse(localStorage.getItem(\"token\")).token\n          }`,\n        },\n        mode: \"cors\",\n        cache: \"default\",\n      };\n\n      fetch(\"http://localhost:5000/admin/login\", myInit)\n        .then((res) => {\n          if (res.ok) return res.json();\n          else {\n            throw Error(\"Invalid admin key\");\n          }\n          // return res.json();\n        })\n        .then((jsonRes) => {\n          if (jsonRes.msg === \"You are already an admin\") {\n            setUser({ ...user, isAdmin: true });\n          }\n        })\n        .catch((err) => console.log(err));\n    }\n  }, []);\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <UserContext.Provider value={{ user, setUser }}>\n          <NavBar />\n          <div className=\"content\">\n            {/* {JSON.stringify(user)} */}\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/blogs\" component={Home} />\n              <Route exact path=\"/admin/blogs\" component={Home} />\n              <Route exact path=\"/admin/login\" component={AdminLogin} />\n              <Route path=\"/create\">\n              <Create />\n            </Route>\n              <Route path=\"/blogs/:id\" component={BlogDetails}></Route>\n              <Route path=\"/login\" component={Login} />\n              <Route path=\"/register\" component={Register} />\n              <Route path=\"/admin/login\" component={AdminLogin} />\n            </Switch>\n          </div>\n        </UserContext.Provider>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/NavBar.jsx",[],"/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/Home.jsx",[],"/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/useFetch.js",["63","64"],"import React, { useState, useEffect } from \"react\";\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  const token = localStorage.getItem(\"token\")\n    ? JSON.parse(localStorage.getItem(\"token\")).token\n    : \"\";\n\n  useEffect(() => {\n    // for useEffect cleanup\n    const abortCont = new AbortController();\n    const bearer = 'BEARER ' + token;\n    // console.log({ token });\n    setTimeout(() => {\n      //\n      \n      const myInit = {\n        method: 'GET',\n        // withCredentials: true,\n        // credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': bearer,\n        },\n        mode: 'cors',\n        cache: \"default\",\n        signal: abortCont.signal,\n      };\n      // console.log(myInit);\n      fetch(url, myInit)\n        .then((res) => {\n          // console.log(res);\n          if (!res.ok) {\n            throw Error(\"Could not fetch data for that resource\");\n          }\n          return res.json();\n        })\n        .then((jsonRes) => {\n          setIsPending(false);\n          setData(jsonRes);\n          setError(null);\n        })\n        .catch((err) => {\n          // we want to recognize abort error caused by switching page while data was being fetched\n          // code: 20, name: \"AbortError\"\n          if (err.code === 20) {\n            console.log(\"fetch aborted\");\n          } else {\n            setError(err.message);\n            setIsPending(false);\n          }\n        });\n      //\n    }, 1000);\n\n    return () => {\n      // cleanup function: read more about it in documentation\n      abortCont.abort();\n    };\n  }, [url]);\n\n  //   whenever the url changes, the useEffect gets executed\n\n  return {\n    data: data,\n    isPending: isPending,\n    error: error,\n  };\n};\n\nexport default useFetch;\n\n//\n","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/List.jsx",["65"],"import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { UserContext } from \"../UserContext.js\";\n\nconst List = (props) => {\n  // console.log(props);\n  const { dataList, blogId } = props;\n  const { user } = useContext(UserContext);\n\n  return (\n    <div className=\"blog-list\">\n      {dataList &&\n        Array.from(dataList).map((data, indx) => {\n          return (\n            <div className={data.commentsArray && \"blog-preview\"} key={indx}>\n              {/* If it has commentsArray then it is a blogpost */}\n              {data.commentsArray && (\n                <Link to={`/blogs/${data._id}`}>\n                  <h2>{data?.title}</h2>\n                  <em>Author: {data.authorId}</em>\n                  {data.commentsArray ? null : <p>{data.text}</p>}\n                </Link>\n              )}\n              {/* Else it is a commentsArray */}\n              {!data.commentsArray && (\n                <React.Fragment>\n                  <h2>{data?.title}</h2>\n                  <em>Author: {data.authorId}</em>\n                  {data.commentsArray ? null : <p>{data.text}</p>}\n                  {user && user.isAdmin && (\n                    <button\n                      onClick={(e) => {\n                        return props.handleCommentDelete(data._id);\n                      }}\n                    >\n                      Delete\n                    </button>\n                  )}\n                </React.Fragment>\n              )}\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default List;\n","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/BlogDetails.jsx",["66","67","68"],"import React, { useContext, useState, useEffect } from \"react\";\nimport { Redirect, useHistory, useParams } from \"react-router-dom\";\nimport useFetch from \"../useFetch.js\";\nimport List from \"./List.jsx\";\nimport { UserContext } from \"../UserContext.js\";\nimport FlashMessages from \"../components/FlashMessages.jsx\";\n\nconst BlogDetails = () => {\n  const { id: blogId } = useParams();\n  const { data: blog, isPending, error } = useFetch(\n    `http://localhost:5000/posts/${blogId}`\n  );\n\n  const len = blog ? blog.commentsArray.length : 0;\n  const pubFlag = blog?.isPublished;\n  // console.log(blog && blog.commentsArray.map((c) => c.text));\n  const [commentsArray, setCommentsArray] = useState(blog?.commentsArray);\n  const [isPublished, setIsPublished] = useState(blog?.isPublished);\n  const { user, setUser } = useContext(UserContext);\n  const [comment, setComment] = useState(\"\"); //controlled component's value\n  const [successMessages, setSuccessMessages] = useState([]);\n  const [failureMessages, setFailureMessages] = useState([]);\n  const history = useHistory();\n\n  // console.log(blog);\n  // console.log({ pubFlag });\n  // console.log({ isPublished });\n\n  useEffect(() => {\n    // console.log(blog ? blog.commentsArray.map((c) => c.text) : \"empty\");\n    // console.log(blog);\n    setCommentsArray(blog?.commentsArray);\n    setIsPublished(blog?.isPublished);\n    // console.log(commentsArray);\n    // console.log(\"len:\", len);\n  }, [len, pubFlag]);\n\n  // console.log(commentsArray);\n\n  const handleCommentSubmit = (e) => {\n    const myInit = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `BEARER ${\n          JSON.parse(localStorage.getItem(\"token\")).token\n        }`,\n      },\n      mode: \"cors\",\n      cache: \"default\",\n      body: JSON.stringify({ text: comment }),\n    };\n\n    e.preventDefault();\n    fetch(`http://localhost:5000/posts/${blogId}/comments`, myInit)\n      .then((res) => {\n        if (res.ok) return res.json();\n        throw Error(\"Unable to post comment\");\n      })\n      .then((jsonRes) => {\n        // console.log(jsonRes);\n        // console.log(Array.from(commentsArray));\n        let updatedCommentsArray = Array.from(commentsArray);\n        updatedCommentsArray.push(jsonRes);\n        // console.log({updatedCommentsArray});\n        setComment(\"\");\n        setCommentsArray(updatedCommentsArray);\n        return;\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const handleChange = (e) => {\n    setComment(e.target.value);\n  };\n\n  const handlePublishChange = () => {\n    // console.log(isPublished);\n    const token = localStorage.getItem(\"token\")\n      ? JSON.parse(localStorage.getItem(\"token\")).token\n      : \"\";\n    const bearer = \"BEARER \" + token;\n    const reqOptions = {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\", Authorization: bearer },\n      body: JSON.stringify({ isPublished: !isPublished }),\n      mode: \"cors\",\n    };\n\n    fetch(`http://localhost:5000/admin/posts/${blogId}`, reqOptions)\n      .then((res) => {\n        if (res.ok) return res.json();\n        setFailureMessages([\"error in changing blog status\"]);\n        throw Error(\"error in changing blog status\");\n      })\n      .then((jsonRes) => {\n        // console.log(jsonRes);\n        const oldFlag = isPublished;\n        const newFlag = !oldFlag;\n        setIsPublished(!isPublished);\n        setSuccessMessages([\n          `Blog status changed from ${\n            oldFlag ? \"published\" : \"unpublished\"\n          } to ${newFlag ? \"published\" : \"unpublished\"}`,\n        ]);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const handleDelete = () => {\n    const myInit = {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `BEARER ${\n          JSON.parse(localStorage.getItem(\"token\")).token\n        }`,\n      },\n      mode: \"cors\",\n      cache: \"default\",\n    };\n    fetch(`http://localhost:5000/admin/posts/${blogId}`, myInit)\n      .then((res) => {\n        if (res.ok) {\n          history.push(\"/\");\n        } else {\n          setFailureMessages(\"Error in deleting blog\");\n          throw Error(\"Error in deleting blog\");\n        }\n      })\n      .then((jsonRes) => {\n        return;\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const handleCommentDelete = (commentId) => {\n    console.log({ commentId });\n    const myInit = {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `BEARER ${\n          JSON.parse(localStorage.getItem(\"token\")).token\n        }`,\n      },\n      mode: \"cors\",\n      cache: \"default\",\n    };\n    fetch(`http://localhost:5000/admin/posts/${blogId}/${commentId}`, myInit)\n      .then((res) => {\n        if (res.ok) {\n          setSuccessMessages([`Comment with id:${commentId} deleted`]);\n          return res.json();\n        } else {\n          setFailureMessages(`Error in deleting comment with id:${commentId}`);\n          throw Error(\"Error in deleting blog\");\n        }\n      })\n      .then((jsonRes) => {\n        // console.log(jsonRes);\n        const updatedCommentsArray = Array.from(jsonRes.commentsArray);\n        setCommentsArray(updatedCommentsArray);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  return (\n    <div className=\"blog-details\">\n      {error && <div>{error}</div>}\n      {isPending && <div>Loading...</div>}\n      {blog && (isPublished || user.isAdmin) && (\n        <React.Fragment>\n          <FlashMessages\n            successMessages={successMessages}\n            failureMessages={failureMessages}\n          />\n          <article>\n            <h2>{blog.title}</h2>\n            <em>Author: {blog.authorId}</em>\n\n            <div>{blog.text}</div>\n          </article>\n          {user && user.isAdmin && (\n            <button onClick={handlePublishChange}>\n              {isPublished ? \"UnPublish\" : \"Publish\"}\n            </button>\n          )}\n          {user && user.isAdmin && (\n            <button onClick={handleDelete}>Delete</button>\n          )}\n\n          <h4>Comments</h4>\n          {user && user.email ? (\n            <form onSubmit={handleCommentSubmit}>\n              <label></label>\n              <input\n                type=\"textarea\"\n                value={comment}\n                onChange={(e) => handleChange(e)}\n              />\n              <button>Post comment</button>\n            </form>\n          ) : null}\n          <div className=\"comments\">\n            <List\n              dataList={commentsArray}\n              handleCommentDelete={handleCommentDelete}\n            />\n          </div>\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default BlogDetails;\n","/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/Login.jsx",[],"/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/Register.jsx",[],"/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/FlashMessages.jsx",[],["69","70"],"/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/UserContext.js",[],"/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/AdminLogin.jsx",[],"/Users/harshmodi/Documents/Express_projects/Odin Project REST api Excercise/client/src/components/Create.jsx",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":52,"column":6,"nodeType":"77","endLine":52,"endColumn":8,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":8,"nodeType":"81","messageId":"82","endLine":1,"endColumn":13},{"ruleId":"75","severity":1,"message":"83","line":63,"column":6,"nodeType":"77","endLine":63,"endColumn":11,"suggestions":"84"},{"ruleId":"79","severity":1,"message":"85","line":7,"column":21,"nodeType":"81","messageId":"82","endLine":7,"endColumn":27},{"ruleId":"79","severity":1,"message":"86","line":2,"column":10,"nodeType":"81","messageId":"82","endLine":2,"endColumn":18},{"ruleId":"79","severity":1,"message":"87","line":19,"column":17,"nodeType":"81","messageId":"82","endLine":19,"endColumn":24},{"ruleId":"75","severity":1,"message":"88","line":36,"column":6,"nodeType":"77","endLine":36,"endColumn":20,"suggestions":"89"},{"ruleId":"71","replacedBy":"90"},{"ruleId":"73","replacedBy":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array. You can also do a functional update 'setUser(u => ...)' if you only need 'user' in the 'setUser' call.","ArrayExpression",["94"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["95"],"'blogId' is assigned a value but never used.","'Redirect' is defined but never used.","'setUser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'blog?.commentsArray' and 'blog?.isPublished'. Either include them or remove the dependency array.",["96"],["92"],["93"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [user]",{"range":"103","text":"104"},"Update the dependencies array to be: [token, url]",{"range":"105","text":"106"},"Update the dependencies array to be: [blog?.commentsArray, blog?.isPublished, len, pubFlag]",{"range":"107","text":"108"},[1677,1679],"[user]",[1727,1732],"[token, url]",[1435,1449],"[blog?.commentsArray, blog?.isPublished, len, pubFlag]"]